Stream API
-----------
Sequence of objects 
The need of stream api -

 it is to perform on the collection of objects.


Package of Stream java.util.Stream 
Predicate , Consumer , Supplier, Functions

Some methods
------------
filter, map, min, max, collect count, distinct

We are going to use stream like a pipeline.

Stream() method is present inside the collection interface.
-This is a default method.
-It converts the list of data to the stream format.
-
-Since it is present in the collections we can use it from anywhere.
-It converts it into stream object.
-Whatever the change done it will not affect as just the copy has been taken.
-It is a default non-static method.

Collectors class have method toList(), toSet(), toMap()



To convert stream object to a list then we have to use collect method which accepts Collectors methods(toList(), toSet(), toMap()) they will then convert it into list.

Each time calling the stream() method a new stream object will be returned.

import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class class15 {
    public static void main(String[] args) {
        List<Integer> list = Arrays.asList(1, 32, 1, 34, 54, 32, 3);

        // Create streams
        Stream<Integer> stream = list.stream();
        Stream<Integer> stream1 = list.stream().distinct();

        // Collect elements of streams into lists
        List<Integer> resultList = stream.collect(Collectors.toList());
        List<Integer> distinctList = stream1.collect(Collectors.toList());

        // Print the lists
        System.out.println(resultList);
        System.out.println(distinctList);

        List<Integer> list2 = list.stream()
                                .distinct()
                                .collect(Collectors.toList());
        System.out.println(list2);
    }
}

OUTPUT
------
[1, 32, 1, 34, 54, 32, 3]
[1, 32, 34, 54, 3]
[1, 32, 34, 54, 3]

REMEMBER that a stream object can only be used once and use here means that using different stream methods

forEach , reduce , collect are three methods are there in the terminal operation 

Actually there are some steps when stream api is used to get the output 

Input - Intermediate operation - Termination operation - Output

    list3.stream().filter(e->e%2==0).forEach(s->System.out.println(s));

filter() accepts predicate object.



import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.Set;

public class class15 {
    public static void main(String[] args) {
        // List<Integer> list = Arrays.asList(1, 32, 1, 34, 54, 32, 3);

        // // Create streams
        // Stream<Integer> stream = list.stream();
        // Stream<Integer> stream1 = list.stream().distinct();

        // // Collect elements of streams into lists
        // List<Integer> resultList = stream.collect(Collectors.toList());
        // List<Integer> distinctList = stream1.collect(Collectors.toList());

        // // Print the lists
        // System.out.println(resultList);
        // System.out.println(distinctList);

        // List<Integer> list2 = list.stream()
        //                         .distinct()
        //                         .collect(Collectors.toList());
        // System.out.println(list2);

        // list.stream().distinct().forEach(s->System.out.print(s + " "));

        List<Integer> list3 = Arrays.asList(1,3,2,5,8,12,9,15);

        list3.stream().filter(e->e%2==0).collect(Collectors.toSet()).forEach(s->System.out.println(s));
    }
}



One liner .


map() 
-----

Map is used to modify the stream .

List<Integer> list3 = Arrays.asList(1,3,2,5,8,12,9,15);

        List<Integer> l = list3.stream().
                                map(e->e*e).
                                collect(Collectors.toList());
        System.out.println(l);

